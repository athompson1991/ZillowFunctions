, col = c("blue", "green", "red")
, lwd = c(1,1,2)
, lty = c(1,2,1))
plot.zoo(
new_returns_sub
, type = "h"
, col = "blue"
, xlim = c(as.Date("1987-01-01"), as.Date("1987-11-14"))
, main = "DJIA Log Return Forecast on 1987-10-16\nplus actual return on 1987-10-19"
, ylab = "return"
, xaxt = "n"
, las  = 2
)
lines(date_range, upper_bound, col = "red", lwd = 2)
lines(date_range, lower_bound, col = "red", lwd = 2)
lines(date_range, opt_fcst@forecast$seriesFor, lty =2, col = "green")
month_obs <- seq(as.Date("1987-01-01"), as.Date("1987-12-01"), by = "month")[seq(1,12, by = 2)]
axis(1, at = month_obs, labels = as.character(month_obs, format = "%b"),las = 2)
legend("bottomleft"
, legend = c("Actual", "Mean Forecast", "95% Prediction Interval")
, col = c("blue", "green", "red")
, lwd = c(1,1,2)
, lty = c(1,2,1)
, bty = "n")
, xlab = NA
, ylim = c(min(new_returns_sub), 0.05)
plot.zoo(
new_returns_sub
, type = "h"
, ylim = c(min(new_returns_sub), 0.05)
, xlim = c(as.Date("1987-01-01"), as.Date("1987-11-14"))
, main = "DJIA Log Return Forecast on 1987-10-16\nplus actual return on 1987-10-19"
, xlab = NA
, ylab = "return"
, col = "blue"
, xaxt = "n"
, las  = 2
)
lines(date_range, upper_bound, col = "red", lwd = 2)
lines(date_range, lower_bound, col = "red", lwd = 2)
lines(date_range, opt_fcst@forecast$seriesFor, lty =2, col = "green")
month_obs <- seq(as.Date("1987-01-01"), as.Date("1987-12-01"), by = "month")[seq(1,12, by = 2)]
axis(1, at = month_obs, labels = as.character(month_obs, format = "%b"),las = 2)
legend("bottomleft"
, legend = c("Actual", "Mean Forecast", "95% Prediction Interval")
, col = c("blue", "green", "red")
, lwd = c(1,1,2)
, lty = c(1,2,1)
, bty = "n")
opt_fcst@forecast$seriesFor
opt_fcst@model$pars
opt_fcst@model$fmodel
library(mvtnorm)
opt_fcst@model$fixed.pars
opt_fcst@model$start.pars
opt_fcst@model$modelinc
opt_fcst@model$pars
opt_fcst@model$pars
use_pars <- opt_fcst@model$pars["mu", "omega", "alpha1", "beta1", "shape"]
use_pars <- opt_fcst@model$pars[c("mu", "omega", "alpha1", "beta1", "shape"), ]
use_pars <- opt_fcst@model$pars[c("mu", "omega", "alpha1", "beta1", "shape"), 1]
use_pars
?std
library(sn)
black_monday <- min(returns)
black_monday
library(zoo)
library(sn)
library(lattice)
library(rugarch)
def_par <- par()
setwd("E:\\School Stuff\\CFRM 542 - Financial Data Modeling and Analysis in R\\assignment_scripts\\assignment10")
filenames = c(
"djia.png"
,"dotchart.png"
,"bic.dat"
,"seriesPlusSigma.png"
,"sigma.dat"
,"series.dat"
,"upper.dat"
,"lower.dat"
,"forecast.png"
,"recurrence.dat"
)
save_dir = "assignment10_output"
save_filenames = paste(save_dir, filenames, sep = "/")
readfiles = c("djia.csv")
read_dir = "assignment10_data"
read_filenames = paste(read_dir, readfiles, sep = "/")
djia_xts <- as.xts(read.zoo(read_filenames[1],  index.column = 1, header = T, sep = ","))
out_plot <- xyplot(  djia_xts
, grid = T
, scales = list(y = list(log = T, equispaced.log = F))
, main = "Dow Jones Industrial Average"
, xlab = NULL)
png(save_filenames[1], width = 7, height = 5, units = "in", res = 300)
print(out_plot)
dev.off()
djia_xts <- djia_xts["1915/"]
returns <- diff(log(djia_xts))[-1]
returns_sub <- returns["1985-10-21/1987-10-16"]
# Garch(1,1) with normal
garch_normal <- ugarchspec(
variance.model = list(garchOrder = c(1,1))
,mean.model = list(armaOrder = c(0,0))
)
garch_normal_fit <- ugarchfit(spec = garch_normal, data = returns_sub)
# Garch(1,1) with t
garch_t <- ugarchspec(
variance.model = list(garchOrder = c(1,1))
,mean.model = list(armaOrder = c(0,0))
,distribution.model = "std"
)
garch_t_fit <- ugarchfit(spec = garch_t, data = returns_sub)
# APARCH(1,1) with normal
aparch_normal <- ugarchspec(
variance.model = list(model = "apARCH", garchOrder = c(1,1))
,mean.model = list(armaOrder = c(0,0))
)
aparch_normal_fit <- ugarchfit(spec = aparch_normal, data = returns_sub)
# APARCH(1,1) with t
aparch_t <- ugarchspec(
variance.model = list(model = "apARCH", garchOrder = c(1,1))
,mean.model = list(armaOrder = c(0,0))
,distribution.model = "std"
)
aparch_t_fit <- ugarchfit(spec = aparch_t, data = returns_sub)
out_bic <- c(
infocriteria(aparch_t_fit)[2]
,infocriteria(aparch_normal_fit)[2]
,infocriteria(garch_t_fit)[2]
,infocriteria(garch_normal_fit)[2]
)
png(save_filenames[2], width = 7, height = 5, units = "in", res = 300)
par(mfrow = c(1,1),  mar = c(4,10,4,2))
bic_names <- c("APARCH(1,1)-std", "APARCH(1,1)-Normal", "GARCH(1,1)-std", "GARCH(1,1)-Normal")
plot(NA, NA,xlim = range(out_bic), ylim = c(0,5), ylab = "", xlab= NA, main = "BIC for GARCH Model Specifications", yaxt = "n")
abline(h = 1:4, b = 0, lty = 3, col = "grey")
points(out_bic[4:1], 1:4, ylim = c(0, 5), pch = 19, col = "blue")
axis(2, at = 1:4, labels = bic_names[4:1], las = 2, col.axis = "blue")
dev.off()
par(def_par)
write(out_bic[4:1], save_filenames[3])
png(save_filenames[4], width = 7, height = 5, units = "in", res = 300)
plot(garch_t_fit, which = 1)
dev.off()
opt_fcst <- ugarchforecast(garch_t_fit, n.ahead = 30)
dist_out <- qdist(  "std"
, p = 0.975
, mu = 0
, sigma = 1
, shape = coef(garch_t_fit)["shape"])
upper_bound <- opt_fcst@forecast$seriesFor + dist_out * opt_fcst@forecast$sigmaFor
lower_bound <- opt_fcst@forecast$seriesFor - dist_out * opt_fcst@forecast$sigmaFor
write(opt_fcst@forecast$sigmaFor, save_filenames[5], ncol = length(opt_fcst@forecast$sigmaFor))
write(opt_fcst@forecast$seriesFor, save_filenames[6], ncol = length(opt_fcst@forecast$seriesFor))
write(upper_bound, save_filenames[7], ncol = length(upper_bound))
write(lower_bound, save_filenames[8], ncol = length(lower_bound))
new_returns_sub <- returns["1987-01-01/1987-10-19"]
date_range <- seq(as.Date('1987-10-16'), as.Date('1987-10-16')+ 29, by = "day")
png(save_filenames[9], width = 7, height = 5, units = "in", res = 300)
plot.zoo(
new_returns_sub
, type = "h"
, col = "blue"
, ylim = c(min(new_returns_sub), 0.05)
, xlim = c(as.Date("1987-01-01"), as.Date("1987-11-14"))
, main = "DJIA Log Return Forecast on 1987-10-16\nplus actual return on 1987-10-19"
, ylab = "return"
, xlab = NA
, xaxt = "n"
, las  = 2
)
lines(date_range, upper_bound, col = "red", lwd = 2)
lines(date_range, lower_bound, col = "red", lwd = 2)
lines(date_range, opt_fcst@forecast$seriesFor, lty =2, col = "green")
month_obs <- seq(as.Date("1987-01-01"), as.Date("1987-12-01"), by = "month")[seq(1,12, by = 2)]
axis(1, at = month_obs, labels = as.character(month_obs, format = "%b"),las = 2)
legend("bottomleft"
, legend = c("Actual", "Mean Forecast", "95% Prediction Interval")
, col = c("blue", "green", "red")
, lwd = c(1,1,2)
, lty = c(1,2,1)
, bty = "n")
dev.off()
use_pars <- opt_fcst@model$pars[c("mu", "omega", "alpha1", "beta1", "shape"), 1]
black_monday <- min(returns)
black_monday
opt_fcst@forecast$n.roll
opt_fcst@forecast$n.ahead
opt_fcst@forecast$N
opt_fcst@forecast$n.start
new_fcst <- ugarchforecast(garch_t_fit, n.ahead = 30)
use_pars <- opt_fcst@model$pars[c("mu", "omega", "alpha1", "beta1", "shape"), 1]
new_fcst@model$pars
new_fcst@forecast$seriesFor
new_fcst <- ugarchforecast(garch_t_fit, n.ahead = 1)
new_fcst@model$pars
new_fcst@forecast$seriesFor
qstd
qst
new_fcst@forecast$sigmaFor
use_pars
round(use_pars["shape"])
pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
pst(0.1, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
pst(-0.1, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
big_T <- 1/probs
probs <- pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
big_T <- 1/probs
big_T
recurrence_interval <- big_T / 250
recurrence_interval
library(xts)
new_fcst
library(zoo)
library(sn)
library(lattice)
library(rugarch)
library(xts)
def_par <- par()
setwd("E:\\School Stuff\\CFRM 542 - Financial Data Modeling and Analysis in R\\assignment_scripts\\assignment10")
filenames = c(
"djia.png"
,"dotchart.png"
,"bic.dat"
,"seriesPlusSigma.png"
,"sigma.dat"
,"series.dat"
,"upper.dat"
,"lower.dat"
,"forecast.png"
,"recurrence.dat"
)
save_dir = "assignment10_output"
save_filenames = paste(save_dir, filenames, sep = "/")
readfiles = c("djia.csv")
read_dir = "assignment10_data"
read_filenames = paste(read_dir, readfiles, sep = "/")
djia_xts <- as.xts(read.zoo(read_filenames[1],  index.column = 1, header = T, sep = ","))
out_plot <- xyplot(  djia_xts
, grid = T
, scales = list(y = list(log = T, equispaced.log = F))
, main = "Dow Jones Industrial Average"
, xlab = NULL)
png(save_filenames[1], width = 7, height = 5, units = "in", res = 300)
print(out_plot)
dev.off()
djia_xts <- djia_xts["1915/"]
returns <- diff(log(djia_xts))[-1]
returns_sub <- returns["1985-10-21/1987-10-16"]
# Garch(1,1) with normal
garch_normal <- ugarchspec(
variance.model = list(garchOrder = c(1,1))
,mean.model = list(armaOrder = c(0,0))
)
garch_normal_fit <- ugarchfit(spec = garch_normal, data = returns_sub)
# Garch(1,1) with t
garch_t <- ugarchspec(
variance.model = list(garchOrder = c(1,1))
,mean.model = list(armaOrder = c(0,0))
,distribution.model = "std"
)
garch_t_fit <- ugarchfit(spec = garch_t, data = returns_sub)
# APARCH(1,1) with normal
aparch_normal <- ugarchspec(
variance.model = list(model = "apARCH", garchOrder = c(1,1))
,mean.model = list(armaOrder = c(0,0))
)
aparch_normal_fit <- ugarchfit(spec = aparch_normal, data = returns_sub)
# APARCH(1,1) with t
aparch_t <- ugarchspec(
variance.model = list(model = "apARCH", garchOrder = c(1,1))
,mean.model = list(armaOrder = c(0,0))
,distribution.model = "std"
)
aparch_t_fit <- ugarchfit(spec = aparch_t, data = returns_sub)
out_bic <- c(
infocriteria(aparch_t_fit)[2]
,infocriteria(aparch_normal_fit)[2]
,infocriteria(garch_t_fit)[2]
,infocriteria(garch_normal_fit)[2]
)
png(save_filenames[2], width = 7, height = 5, units = "in", res = 300)
par(mfrow = c(1,1),  mar = c(4,10,4,2))
bic_names <- c("APARCH(1,1)-std", "APARCH(1,1)-Normal", "GARCH(1,1)-std", "GARCH(1,1)-Normal")
plot(NA, NA,xlim = range(out_bic), ylim = c(0,5), ylab = "", xlab= NA, main = "BIC for GARCH Model Specifications", yaxt = "n")
abline(h = 1:4, b = 0, lty = 3, col = "grey")
points(out_bic[4:1], 1:4, ylim = c(0, 5), pch = 19, col = "blue")
axis(2, at = 1:4, labels = bic_names[4:1], las = 2, col.axis = "blue")
dev.off()
par(def_par)
write(out_bic[4:1], save_filenames[3])
png(save_filenames[4], width = 7, height = 5, units = "in", res = 300)
plot(garch_t_fit, which = 1)
dev.off()
opt_fcst <- ugarchforecast(garch_t_fit, n.ahead = 30)
dist_out <- qdist(  "std"
, p = 0.975
, mu = 0
, sigma = 1
, shape = coef(garch_t_fit)["shape"])
upper_bound <- opt_fcst@forecast$seriesFor + dist_out * opt_fcst@forecast$sigmaFor
lower_bound <- opt_fcst@forecast$seriesFor - dist_out * opt_fcst@forecast$sigmaFor
write(opt_fcst@forecast$sigmaFor, save_filenames[5], ncol = length(opt_fcst@forecast$sigmaFor))
write(opt_fcst@forecast$seriesFor, save_filenames[6], ncol = length(opt_fcst@forecast$seriesFor))
write(upper_bound, save_filenames[7], ncol = length(upper_bound))
write(lower_bound, save_filenames[8], ncol = length(lower_bound))
new_returns_sub <- returns["1987-01-01/1987-10-19"]
date_range <- seq(as.Date('1987-10-16'), as.Date('1987-10-16')+ 29, by = "day")
png(save_filenames[9], width = 7, height = 5, units = "in", res = 300)
plot.zoo(
new_returns_sub
, type = "h"
, col = "blue"
, ylim = c(min(new_returns_sub), 0.05)
, xlim = c(as.Date("1987-01-01"), as.Date("1987-11-14"))
, main = "DJIA Log Return Forecast on 1987-10-16\nplus actual return on 1987-10-19"
, ylab = "return"
, xlab = NA
, xaxt = "n"
, las  = 2
)
lines(date_range, upper_bound, col = "red", lwd = 2)
lines(date_range, lower_bound, col = "red", lwd = 2)
lines(date_range, opt_fcst@forecast$seriesFor, lty =2, col = "green")
month_obs <- seq(as.Date("1987-01-01"), as.Date("1987-12-01"), by = "month")[seq(1,12, by = 2)]
axis(1, at = month_obs, labels = as.character(month_obs, format = "%b"),las = 2)
legend("bottomleft"
, legend = c("Actual", "Mean Forecast", "95% Prediction Interval")
, col = c("blue", "green", "red")
, lwd = c(1,1,2)
, lty = c(1,2,1)
, bty = "n")
dev.off()
new_fcst <- ugarchforecast(garch_t_fit, n.ahead = 1)
use_pars <- opt_fcst@model$pars[c("mu", "omega", "alpha1", "beta1", "shape"), 1]
black_monday <- min(returns)
probs <- pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
big_T <- 1/probs
recurrence_interval <- big_T / 250
write(recurrence_interval, save_filenames[10])
new_fcst@model$pars
new_fcst@forecast$sigmaFor
?ugarchforecast
quantile(new_fcst)
quantile(0.25, new_fcst)
quantile(new_fcst, 0.25)
quantile(new_fcst, 0.1)
skew(new_fcst)
probs <- pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"], alpha = use_pars["alpha1"])
big_T <- 1/probs
recurrence_interval <- big_T / 250
recurrence_interval
new_fcst@forecast$seriesFor
black_monday
?pst
pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
probs <- pst(black_monday, xi = use_pars["mu"], omega = xi["omega"], nu = use_pars["shape"])
probs <- pst(black_monday, xi = use_pars["mu"], omega = use_pars["omega"], nu = use_pars["shape"])
prob
probs
probs <- pst(black_monday, xi = use_pars["mu"], omega = use_pars["beta1"], nu = use_pars["shape"])
probs
big_T <- 1/probs
recurrence_interval <- big_T / 250
recurrence_interval
probs <- pst(black_monday, xi = use_pars["mu"], omega = use_pars["beta1"], nu = use_pars["shape"])
big_T <- 1/probs
recurrence_interval <- big_T / 250
recurrence_interval
probs <- pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
probs
big_T <- 1/probs
big_T
recurrence_interval <- big_T / 250
recurrence_interval
sigma(garch_t_fit)
plot(sigma(garch_t_fit))
black_monday
use_pars["mu"] == new_fcst@forecast$seriesFor
new_fcst@forecast
new_fcst@model
probs <- pst(black_monday, xi = use_pars["mu"], omega = use_pars["alpha1"], nu = use_pars["shape"])
probs
big_T <- 1/probs
recurrence_interval <- big_T / 250
recurrence_interval
new_fcst@forecast$sigmaFor
probs <- pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
big_T <- 1/probs
recurrence_interval <- big_T / 250
recurrence_interval
opt_fcst
opt_fcst@model$pars
probs <- pst(black_monday, xi = use_pars["mu"], omega = use_pars["omega"], nu = use_pars["shape"])
big_T <- 1/probs
recurrence_interval <- big_T / 250
big_T
new_fcst@model$pars["omega"] == opt_fcst@model$pars["omega"]
new_fcst@model$pars["omega",] == opt_fcst@model$pars["omega",]
probs <- pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = use_pars["shape"])
big_T <- 1/probs
recurrence_interval <- big_T / 250
recurrence_interval
probs <- pst(black_monday, xi = use_pars["mu"], omega = new_fcst@forecast$sigmaFor, nu = round(use_pars["shape"]))
big_T <- 1/probs
recurrence_interval <- big_T / 250
recurrence_interval
new_fcst@forecast
new_fcst@model$modeldesc
new_fcst@model
probs <- pst(black_monday, xi = use_pars["mu"], omega = use_pars["omega"], nu = use_pars["shape"])
big_T <- 1/probs
recurrence_interval <- big_T / 250
write(recurrence_interval, save_filenames[10])
recurrence_interval
pdist
pdist(distribution = "std")
?pdist
pdist(distribution = "std", q = black_monday, mu = new_fcst@forecast$seriesFor, sigma = new_fcst@forecast$sigmaFor, lambda = use_pars["shape"])
probs <- pdist(distribution = "std"
, q = black_monday
, mu = new_fcst@forecast$seriesFor
, sigma = new_fcst@forecast$sigmaFor
, lambda = use_pars["shape"])
big_T <- 1/probs
recurrence_interval <- big_T / 250
recurrence_interval
probs <- pdist(distribution = "std"
, q = black_monday
, mu = new_fcst@forecast$seriesFor
, sigma = new_fcst@forecast$sigmaFor
, shape = use_pars["shape"])
big_T <- 1/probs
recurrence_interval <- big_T / 250
recurrence_interval
library(quantmod)
vix < getSymbols("^VIX", auto.assign = F)
vix < getSymbols("^VIX", auto.assign = F)
vix <- getSymbols("^VIX", auto.assign = F)
head(vix)
vix_adj <- vix$VIX.Adjusted
plot(vix_adj)
vix_adj <- vix_adj["2015/"]
plot(vix_adj)
upro <- getSymbols("UPRO", auto.assign = F)
upro_adj <- upro$UPRO.Adjusted
upro_adj <- upro_adj["2015/"]
plot(upro_adj)
plot(upro_adj["2016"])
??ur.df
library(urca)
ur.df(upro_adj, type = "drift")
ur.df(upro_adj, type = "drift", lags = 30)
Acf(upro_ad)
Acf(upro_adj)
library(forecast)
Acf(upro_adj)
Acf(diff(upro_adj))
Acf(diff(log(upro_adj)))
Acf(diff(log(upro_adj)), 60)
auto.arima(upro_adj)
fitted <- auto.arima(upro_adj)
plot(forecast(fitted))
plot(forecast(fitted), include = 30)
fitted <- auto.arima(upro_adj["2016"])
plot(forecast(fitted), include = 30)
plot(forecast(fitted))
Pacf(diff(log(upro_adj)), 60)
devtools::load_all(".")
z <- get_zillow_data("SingleFamilyResidence", loc_type = "Zip")
performance_chart(z$returns)
75/5
72/5
png("performance_chart.png", width = 10, height = 7, units = "in", res = 300)
performance_chart(z$returns)
dev.off()
png("performance_chart.png", width = 15, height = 7, units = "in", res = 700)
performance_chart(z$returns, from = "2010-01-01")
png("performance_chart.png", width = 10, height = 7, units = "in", res = 500)
performance_chart(z$returns, from = "2010-01-01")
dev.off()
dev.off()
dev.off()
png("performance_chart.png", width = 40, height = 25, units = "in", res = 1000)
performance_chart(z$returns, from = "2000-01-01")
png("performance_chart.png", width = 40, height = 25, units = "in", res = 1000)
performance_chart(z$returns, from = "2000-01-01")
png("performance_chart.png", width = 40, height = 25, units = "in", res = 1000)
png("performance_chart.png", width = 40, height = 25, units = "in", res = 1000)
png("performance_chart.png", width = 40, height = 25, units = "in", res = 1000)
z <- get_zillow_data("SingleFamilyResidence", loc_type = "Zip")
devtools::load_all(".")
devtools::load_all(".")
library(ZillowFunctions)
devtools::load_all(".")
library(ZillowFunctions)
z <- get_zillow_data("SingleFamilyResidence", loc_type = "Zip")
png("performance_chart.png", width = 40, height = 25, units = "in", res = 1000)
performance_chart(z$returns, from = "2000-01-01")
dev.off()
dev.off()
plot(1:10)
dev.off()
library(ZillowFunctions)
z <- get_zillow_data("SingleFamilyResidence", loc_type = "Zip")
png("performance_chart.png", width = 40, height = 25, units = "in", res = 1000)
performance_chart(z$returns, from = "2000-01-01")
dev.off()
png("performance_chart.png", width = 40, height = 25, units = "in", res = 1000)
