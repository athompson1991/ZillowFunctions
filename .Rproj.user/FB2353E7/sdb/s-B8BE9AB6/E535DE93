{
    "contents" : "get_zillow_data <- function(quote_type = \"AllHomes\", loc_type = \"State\", filename = \"out.csv\"){\n  quote_types <- c(\"AllHomes\", \"Condominium\", \"SingleFamilyResidence\"\n                   ,\"1bedroom\",\"2bedroom\",\"3bedroom\", \"4bedroom\", \"5BedroomOrMore\"\n  )\n  loc_types <- c(\"State\", \"Metro\", \"County\", \"City\", \"Zip\", \"Neighborhood\")\n\n\n  if(!(quote_type %in% quote_types) | !(loc_type %in% loc_types)){\n    e = simpleError(\"badQuote\")\n    good_quote <- paste(\"Valid Quotes:\", paste(quote_types, sep = \"\", collapse = \", \"), sep = \" \")\n    good_loc <- paste(\"Valid Locations:\", paste(loc_types, sep = \"\", collapse = \", \"), sep = \" \")\n    good_all <- paste(good_quote, \"\\n\", good_loc, sep = \"\", collapse = \"\")\n    tryCatch(stop(e), error = function(e) e, finally = cat(good_all))\n    break\n  }\n\n  if(quote_type == \"Condominium\"){\n    quote_type <- \"Condominum\"\n  }\n\n  url_head <- \"http://files.zillowstatic.com/research/public/\"\n  pasted <- paste(url_head, loc_type, \"/\", loc_type,\"_Zhvi_\", quote_type, \".csv\", sep = \"\")\n  temp_csv <- paste(tempfile(),\".csv\",sep = \"\")\n  download.file(pasted,destfile = temp_csv)\n  raw_data <- read.csv(temp_csv)\n  fixed_data <- fix_zillow_data(raw_data)\n  fixed_data <- do_returns(fixed_data)\n  fixed_data$info$unique_id <- paste(fixed_data$info$RegionID, fixed_data$info$RegionName, sep = \"_\")\n  fixed_data <- do_returns(fixed_data)\n  fixed_data\n}\n\n\nfix_zillow_data <- function(d, na_rm = T){\n  colname_logic <- unlist(lapply(strsplit(colnames(d), \"\"), function(x) \"X\" %in% x))\n  info_cols <- d[ ,colnames(d)[!(colname_logic)]]\n  data_cols <- t(d[ ,colnames(d)[colname_logic]])\n  colnames(data_cols) <- d$RegionName\n  dates <- as.Date(paste(gsub(\"X\",\"\",row.names(data_cols)),\"01\",sep = \".\"), \"%Y.%m.%d\")\n  out_list <- list(info = info_cols, time_series = zoo::zoo(data_cols, order.by = dates))\n  if(na_rm){\n    good_cols <- which(unlist(apply(out_list$time_series, 2, function(x) all(!(is.na(x))))))\n    out_list$info <- out_list$info[good_cols,]\n    out_list$time_series <- out_list$time_series[,good_cols]\n  }\n  return(out_list)\n}\n\ndo_returns <- function(fixed_obj){\n  timeseries <- fixed_obj$time_series\n  fixed_obj[[\"returns\"]] <- xts::as.xts(diff(log(timeseries))[-1, ])\n  fixed_obj\n}\n\n\ncalc_basic_data <- function(obj, start = NA, end = NA){\n  if(is.na(start)){\n    start <- start(obj$returns)\n  }else{\n    start <- start\n  }\n  if(is.na(end)){\n    end = end(obj$returns)\n  }else{\n    end <- end\n  }\n  date_range <- paste(start, end, sep = \"/\")\n  print(date_range)\n  returns_df <- obj$returns[date_range]\n  prices <- xts::as.xts(obj$time_series)[date_range]\n  mean_mth_ret <- apply(returns_df, 2, mean)\n  mean_ann_ret <- mean_mth_ret * 12\n  sd_mth_ret <- apply(returns_df, 2, sd)\n  sd_ann_ret <- sd_mth_ret * sqrt(12)\n  sharpe_ratio <- mean_ann_ret / sd_ann_ret\n  last_price <- apply(prices, 2, xts::last)\n  out <- data.frame(\n    row.names = obj$info$unique_id\n    ,mean_mth_ret\n    ,mean_ann_ret\n    ,sd_mth_ret\n    ,sd_ann_ret\n    ,sharpe_ratio\n    ,last_price\n  )\n  out\n}\n\nperformance_chart <- function(returns, from = \"2014-01-01\", to = \"2015-11-01\"){\n  returns <- window(returns, start = as.Date(from), end = as.Date(to))\n  performance <- (exp(cumsum(returns)) - 1) * 100\n  plot_range <- range(performance)\n  xts::plot.xts(performance[ ,1]\n           , type = \"n\"\n           , main = \"Performance\"\n           , xlab = NA\n           , ylab = \"Percentage Growth\"\n           , las = 1\n           , ylim = plot_range)\n  for(i in 1:ncol(performance)) lines(performance[ ,i], col = rgb(0,0,0,0.2))\n\n}\n",
    "created" : 1455484835573.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1303690943",
    "id" : "E535DE93",
    "lastKnownWriteTime" : 1464057417,
    "path" : "E:/codes/R/GitStuff/ZillowFunctions/R/functions.R",
    "project_path" : "R/functions.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}